auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
class_names = [
    'Pedestrian',
    'Cyclist',
    'Car',
]
data_root = 'data/kitti/'
dataset_type = 'KittiDataset'
db_sampler = dict(
    backend_args=None,
    classes=[
        'Pedestrian',
        'Cyclist',
        'Car',
    ],
    data_root='data/kitti/',
    info_path='data/kitti/kitti_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ],
        filter_by_min_points=dict(Car=5, Cyclist=5, Pedestrian=5)),
    rate=1.0,
    sample_groups=dict(Car=20, Cyclist=15, Pedestrian=15))
default_hooks = dict(
    checkpoint=dict(interval=-1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
eval_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(keys=[
        'points',
    ], type='Pack3DDetInputs'),
]
input_modality = dict(use_camera=False, use_lidar=True)
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr = 0.001
metainfo = dict(classes=[
    'Pedestrian',
    'Cyclist',
    'Car',
])
model = dict(
    backbone=dict(
        aggregation_channels=(
            None,
            None,
            None,
            None,
        ),
        dilated_group=(
            False,
            False,
            False,
            False,
        ),
        fps_mods=(
            'D-FPS',
            'D-FPS',
            'D-FPS',
            'D-FPS',
        ),
        fps_sample_range_lists=(
            -1,
            -1,
            -1,
            -1,
        ),
        in_channels=4,
        norm_cfg=dict(eps=0.001, momentum=0.1, type='BN2d'),
        num_points=(
            4096,
            1024,
            256,
            64,
        ),
        num_samples=(
            (
                16,
                32,
            ),
            (
                16,
                32,
            ),
            (
                16,
                32,
            ),
            (
                16,
                32,
            ),
        ),
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        radii=(
            (
                0.1,
                0.5,
            ),
            (
                0.5,
                1.0,
            ),
            (
                1.0,
                2.0,
            ),
            (
                2.0,
                4.0,
            ),
        ),
        sa_cfg=dict(
            normalize_xyz=False,
            pool_mod='max',
            type='PointSAModuleMSG',
            use_xyz=True),
        sa_channels=(
            (
                (
                    16,
                    16,
                    32,
                ),
                (
                    32,
                    32,
                    64,
                ),
            ),
            (
                (
                    64,
                    64,
                    128,
                ),
                (
                    64,
                    96,
                    128,
                ),
            ),
            (
                (
                    128,
                    196,
                    256,
                ),
                (
                    128,
                    196,
                    256,
                ),
            ),
            (
                (
                    256,
                    256,
                    512,
                ),
                (
                    256,
                    384,
                    512,
                ),
            ),
        ),
        type='PointNet2SAMSG'),
    data_preprocessor=dict(type='Det3DDataPreprocessor'),
    neck=dict(
        fp_channels=(
            (
                1536,
                512,
                512,
            ),
            (
                768,
                512,
                512,
            ),
            (
                608,
                256,
                256,
            ),
            (
                257,
                128,
                128,
            ),
        ),
        type='PointNetFPNeck'),
    roi_head=dict(
        bbox_head=dict(
            in_channels=5,
            loss_bbox=dict(
                beta=0.1111111111111111,
                loss_weight=1.0,
                reduction='sum',
                type='mmdet.SmoothL1Loss'),
            loss_cls=dict(
                loss_weight=1.0,
                reduction='sum',
                type='mmdet.CrossEntropyLoss',
                use_sigmoid=True),
            mlp_channels=[
                128,
                128,
            ],
            num_classes=1,
            num_points=(
                128,
                32,
                -1,
            ),
            num_samples=(
                16,
                16,
                16,
            ),
            pred_layer_cfg=dict(
                bias=True,
                cls_conv_channels=(
                    256,
                    256,
                ),
                in_channels=512,
                reg_conv_channels=(
                    256,
                    256,
                )),
            radius=(
                0.2,
                0.4,
                100,
            ),
            sa_channels=(
                (
                    128,
                    128,
                    128,
                ),
                (
                    128,
                    128,
                    256,
                ),
                (
                    256,
                    256,
                    512,
                ),
            ),
            type='PointRCNNBboxHead',
            with_corner_loss=True),
        bbox_roi_extractor=dict(
            roi_layer=dict(num_sampled_points=512, type='RoIPointPool3d'),
            type='Single3DRoIPointExtractor'),
        depth_normalizer=70.0,
        type='PointRCNNRoIHead'),
    rpn_head=dict(
        bbox_coder=dict(
            code_size=8,
            mean_size=[
                [
                    3.9,
                    1.6,
                    1.56,
                ],
                [
                    0.8,
                    0.6,
                    1.73,
                ],
                [
                    1.76,
                    0.6,
                    1.73,
                ],
            ],
            type='PointXYZWHLRBBoxCoder',
            use_mean_size=True),
        bbox_loss=dict(
            beta=0.1111111111111111,
            loss_weight=1.0,
            reduction='sum',
            type='mmdet.SmoothL1Loss'),
        cls_loss=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            reduction='sum',
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        enlarge_width=0.1,
        num_classes=3,
        pred_layer_cfg=dict(
            cls_linear_channels=(
                256,
                256,
            ),
            in_channels=128,
            reg_linear_channels=(
                256,
                256,
            )),
        type='PointRPNHead'),
    test_cfg=dict(
        rcnn=dict(nms_thr=0.1, score_thr=0.1, use_rotate_nms=True),
        rpn=dict(
            nms_cfg=dict(
                iou_thr=0.85,
                nms_post=512,
                nms_pre=9000,
                score_thr=None,
                use_rotate_nms=True))),
    train_cfg=dict(
        pos_distance_thr=10.0,
        rcnn=dict(
            assigner=[
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(
                        coordinate='lidar', type='BboxOverlaps3D'),
                    match_low_quality=False,
                    min_pos_iou=0.55,
                    neg_iou_thr=0.55,
                    pos_iou_thr=0.55,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(
                        coordinate='lidar', type='BboxOverlaps3D'),
                    match_low_quality=False,
                    min_pos_iou=0.55,
                    neg_iou_thr=0.55,
                    pos_iou_thr=0.55,
                    type='Max3DIoUAssigner'),
                dict(
                    ignore_iof_thr=-1,
                    iou_calculator=dict(
                        coordinate='lidar', type='BboxOverlaps3D'),
                    match_low_quality=False,
                    min_pos_iou=0.55,
                    neg_iou_thr=0.55,
                    pos_iou_thr=0.55,
                    type='Max3DIoUAssigner'),
            ],
            cls_neg_thr=0.25,
            cls_pos_thr=0.7,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_iou_piece_thrs=[
                    0.55,
                    0.1,
                ],
                neg_piece_fractions=[
                    0.8,
                    0.2,
                ],
                neg_pos_ub=-1,
                num=128,
                pos_fraction=0.5,
                return_iou=True,
                type='IoUNegPiecewiseSampler')),
        rpn=dict(
            rpn_proposal=dict(
                iou_thr=0.8,
                nms_post=512,
                nms_pre=9000,
                score_thr=None,
                use_rotate_nms=True))),
    type='PointRCNN')
optim_wrapper = dict(
    clip_grad=dict(max_norm=10, norm_type=2),
    optimizer=dict(
        betas=(
            0.95,
            0.85,
        ), lr=0.001, type='AdamW', weight_decay=0.01),
    type='OptimWrapper')
param_scheduler = [
    dict(
        T_max=35,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=35,
        eta_min=0.01,
        type='CosineAnnealingLR'),
    dict(
        T_max=45,
        begin=35,
        by_epoch=True,
        convert_to_iter_based=True,
        end=80,
        eta_min=1.0000000000000001e-07,
        type='CosineAnnealingLR'),
    dict(
        T_max=35,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=35,
        eta_min=0.8947368421052632,
        type='CosineAnnealingMomentum'),
    dict(
        T_max=45,
        begin=35,
        by_epoch=True,
        convert_to_iter_based=True,
        end=80,
        eta_min=1,
        type='CosineAnnealingMomentum'),
]
point_cloud_range = [
    0,
    -40,
    -3,
    70.4,
    40,
    1,
]
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='kitti_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='training/velodyne_reduced'),
        data_root='data/kitti/',
        metainfo=dict(classes=[
            'Pedestrian',
            'Cyclist',
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        rot_range=[
                            0,
                            0,
                        ],
                        scale_ratio_range=[
                            1.0,
                            1.0,
                        ],
                        translation_std=[
                            0,
                            0,
                            0,
                        ],
                        type='GlobalRotScaleTrans'),
                    dict(type='RandomFlip3D'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='PointsRangeFilter'),
                    dict(
                        num_points=16384,
                        sample_range=40.0,
                        type='PointSample'),
                ],
                type='MultiScaleFlipAug3D'),
            dict(keys=[
                'points',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='KittiDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/kitti/kitti_infos_val.pkl',
    backend_args=None,
    metric='bbox',
    type='KittiMetric')
test_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(
        flip=False,
        img_scale=(
            1333,
            800,
        ),
        pts_scale_ratio=1,
        transforms=[
            dict(
                rot_range=[
                    0,
                    0,
                ],
                scale_ratio_range=[
                    1.0,
                    1.0,
                ],
                translation_std=[
                    0,
                    0,
                    0,
                ],
                type='GlobalRotScaleTrans'),
            dict(type='RandomFlip3D'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
            dict(num_points=16384, sample_range=40.0, type='PointSample'),
        ],
        type='MultiScaleFlipAug3D'),
    dict(keys=[
        'points',
    ], type='Pack3DDetInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=80, val_interval=40)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        dataset=dict(
            ann_file='kitti_infos_train.pkl',
            backend_args=None,
            box_type_3d='LiDAR',
            data_prefix=dict(pts='training/velodyne_reduced'),
            data_root='data/kitti/',
            metainfo=dict(classes=[
                'Pedestrian',
                'Cyclist',
                'Car',
            ]),
            modality=dict(use_camera=False, use_lidar=True),
            pipeline=[
                dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=4,
                    type='LoadPointsFromFile',
                    use_dim=4),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='PointsRangeFilter'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='ObjectRangeFilter'),
                dict(
                    db_sampler=dict(
                        backend_args=None,
                        classes=[
                            'Pedestrian',
                            'Cyclist',
                            'Car',
                        ],
                        data_root='data/kitti/',
                        info_path='data/kitti/kitti_dbinfos_train.pkl',
                        points_loader=dict(
                            backend_args=None,
                            coord_type='LIDAR',
                            load_dim=4,
                            type='LoadPointsFromFile',
                            use_dim=4),
                        prepare=dict(
                            filter_by_difficulty=[
                                -1,
                            ],
                            filter_by_min_points=dict(
                                Car=5, Cyclist=5, Pedestrian=5)),
                        rate=1.0,
                        sample_groups=dict(Car=20, Cyclist=15, Pedestrian=15)),
                    type='ObjectSample'),
                dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
                dict(
                    global_rot_range=[
                        0.0,
                        0.0,
                    ],
                    num_try=100,
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    translation_std=[
                        1.0,
                        1.0,
                        0.5,
                    ],
                    type='ObjectNoise'),
                dict(
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    scale_ratio_range=[
                        0.95,
                        1.05,
                    ],
                    type='GlobalRotScaleTrans'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='PointsRangeFilter'),
                dict(num_points=16384, sample_range=40.0, type='PointSample'),
                dict(type='PointShuffle'),
                dict(
                    keys=[
                        'points',
                        'gt_bboxes_3d',
                        'gt_labels_3d',
                    ],
                    type='Pack3DDetInputs'),
            ],
            test_mode=False,
            type='KittiDataset'),
        times=2,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='ObjectRangeFilter'),
    dict(
        db_sampler=dict(
            backend_args=None,
            classes=[
                'Pedestrian',
                'Cyclist',
                'Car',
            ],
            data_root='data/kitti/',
            info_path='data/kitti/kitti_dbinfos_train.pkl',
            points_loader=dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            prepare=dict(
                filter_by_difficulty=[
                    -1,
                ],
                filter_by_min_points=dict(Car=5, Cyclist=5, Pedestrian=5)),
            rate=1.0,
            sample_groups=dict(Car=20, Cyclist=15, Pedestrian=15)),
        type='ObjectSample'),
    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
    dict(
        global_rot_range=[
            0.0,
            0.0,
        ],
        num_try=100,
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        translation_std=[
            1.0,
            1.0,
            0.5,
        ],
        type='ObjectNoise'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.95,
            1.05,
        ],
        type='GlobalRotScaleTrans'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='PointsRangeFilter'),
    dict(num_points=16384, sample_range=40.0, type='PointSample'),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        type='Pack3DDetInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='kitti_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='training/velodyne_reduced'),
        data_root='data/kitti/',
        metainfo=dict(classes=[
            'Pedestrian',
            'Cyclist',
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        rot_range=[
                            0,
                            0,
                        ],
                        scale_ratio_range=[
                            1.0,
                            1.0,
                        ],
                        translation_std=[
                            0,
                            0,
                            0,
                        ],
                        type='GlobalRotScaleTrans'),
                    dict(type='RandomFlip3D'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='PointsRangeFilter'),
                    dict(
                        num_points=16384,
                        sample_range=40.0,
                        type='PointSample'),
                ],
                type='MultiScaleFlipAug3D'),
            dict(keys=[
                'points',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='KittiDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/kitti/kitti_infos_val.pkl',
    backend_args=None,
    metric='bbox',
    type='KittiMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/point-rcnn_8xb2_kitti-3d-3class'
